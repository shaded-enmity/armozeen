#!/usr/bin/python

from argparse import ArgumentParser
from sys import stdin

from armozeen.parser.pipeline import Pipeline
from armozeen.parser.pipeline.lexemes import Lexemes
from armozeen.parser.pipeline.lexer import CleanupStage, FindTuplesLateStage
from armozeen.parser.pipeline.tokenizer import Tokenizer
from armozeen.interpeter.run import Run
from armozeen.interpeter import AstBuilder
from armozeen.parser.grammars import get_grammars_flat
from armozeen.types import Tokens


class LanguageStage(object):
    (PreGrammars, ExpressionTree, AST, Interpret) = range(4)


def argument_parser():
    ap = ArgumentParser(prog='armozeen')
    ap.add_argument('-s', '--set', help='Set an Armozeen parameter', action='append')
    ap.add_argument('-l', '--list', help='List Armozeen parameters')
    ap.add_argument('-v', '--verbose', action='store_true', help='Print verbose output')
    ap.add_argument('-o', '--optimize', help='Placeholder')
    ap.add_argument('-e', '--expression-tree', help='Print intermediary expression tree and exit', action='store_true')
    ap.add_argument('-a', '--ast', help='Print Abstract Syntax Tree and exit', action='store_true')
    ap.add_argument('-p', '--pre-grammar', help='Print Abstract Syntax Tree and exit', action='store_true')
    ap.add_argument('--version', action='store_true', help='Print version information and exit')
    ap.add_argument('source_file', nargs='?')
    return ap


def get_lexemes():
    return Lexemes


def get_tokenizer():
    return Tokenizer(Tokens.All)


def get_input(f):
    ''' Either read from file passed via stdin or via `f` '''

    if not f or f == '-':
        return stdin.read()
    
    with open(f, 'r') as fl:
        return fl.read()


def get_config_vars():
    return [
        ('bool', 'dump_full_arrays', 'Dumpvar will output the entire array'),
        ('bool', 'defer_lhs_size',   'Defer output bits metavars from usage'),
        ('int',  'verbose',          'Verbosity level')
    ]


stage = LanguageStage.Interpret

args = argument_parser().parse_args()
if args.version:
    print('0.5')
    exit(0)

if args.expression_tree:
    stage = LanguageStage.ExpressionTree
elif args.ast:
    stage = LanguageStage.AST
elif args.pre_grammar:
    stage = LanguageStage.PreGrammars

conf_vars = {}
for cfg in (args.set or []):
    if '=' in cfg:
        k, v = cfg.split('=', 2)
        conf_vars[k] = v
    else:
        conf_vars[cfg] = True


pipeline = []

pipeline.append(get_tokenizer())
pipeline.extend(get_lexemes())

if stage > LanguageStage.PreGrammars:
    pipeline.extend(get_grammars_flat())

pipeline.append(FindTuplesLateStage())

if stage >= LanguageStage.AST:
    pipeline.append(AstBuilder())
    pipeline.append(CleanupStage())

if stage >= LanguageStage.Interpret:
    pipeline.append(Run(**conf_vars))

p = Pipeline(pipeline)
result = p.run(get_input(args.source_file))
if stage < LanguageStage.Interpret:
    print(result)
